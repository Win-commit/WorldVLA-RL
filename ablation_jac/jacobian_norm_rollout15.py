import numpy as np
import matplotlib.pyplot as plt
from scipy.stats import linregress
from sklearn.utils import resample

def plot_jacobian_vs_success_with_ci(jac_base, success_base, jac_ours, success_ours, save_path="jacobian_success_ci.pdf"):
    """
    Scatter + Regression + 95% CI for Baseline vs Ours
    """
    def compute_ci(x, y, n_boot=1000, alpha=0.05):
        """
        Bootstrap 95% CI for linear regression line
        """
        x = np.array(x)
        y = np.array(y)
        lines = []
        N = len(x)
        for _ in range(n_boot):
            idx = np.random.choice(N, N, replace=True)
            slope, intercept, _, _, _ = linregress(x[idx], y[idx])
            lines.append((slope, intercept))
        lines = np.array(lines)
        # Compute CI for predicted y at each x
        x_fit = np.linspace(x.min(), x.max(), 100)
        y_preds = np.array([slope * x_fit + intercept for slope, intercept in lines])
        lower = np.percentile(y_preds, 100*alpha/2, axis=0)
        upper = np.percentile(y_preds, 100*(1-alpha/2), axis=0)
        # Also return mean regression line
        mean_slope = np.mean(lines[:,0])
        mean_intercept = np.mean(lines[:,1])
        y_mean = mean_slope * x_fit + mean_intercept
        return x_fit, y_mean, lower, upper, mean_slope, mean_intercept

    # Baseline
    x_base, y_base_mean, y_base_lower, y_base_upper, slope_base, intercept_base = compute_ci(jac_base, success_base)
    r_base, _, _, _ = linregress(jac_base, success_base)[:4]

    # Ours
    x_ours, y_ours_mean, y_ours_lower, y_ours_upper, slope_ours, intercept_ours = compute_ci(jac_ours, success_ours)
    r_ours, _, _, _ = linregress(jac_ours, success_ours)[:4]

    # Plot
    plt.figure(figsize=(7,5))
    # Scatter
    plt.scatter(jac_base, success_base, c='steelblue', s=30, alpha=0.7, label="Baseline")
    plt.scatter(jac_ours, success_ours, c='darkorange', s=30, alpha=0.7, label="Ours")
    # Regression + CI
    plt.plot(x_base, y_base_mean, 'b--', lw=2)
    plt.fill_between(x_base, y_base_lower, y_base_upper, color='blue', alpha=0.2)
    plt.plot(x_ours, y_ours_mean, 'r--', lw=2)
    plt.fill_between(x_ours, y_ours_lower, y_ours_upper, color='orange', alpha=0.2)
    
    # Labels
    plt.xlabel("Jacobian Norm")
    plt.ylabel("Success Rate")
    plt.title("Jacobian Norm vs Task Success Rate with 95% CI")
    plt.legend()

    # Stats text
    plt.text(0.02, 0.95,
             f"Baseline: slope={slope_base:.3f}, R~{r_base:.2f}\nOurs: slope={slope_ours:.3f}, R~{r_ours:.2f}",
             transform=plt.gca().transAxes, fontsize=10,
             verticalalignment='top', bbox=dict(boxstyle="round,pad=0.3", fc="white", ec="gray", alpha=0.7))

    plt.tight_layout()
    plt.savefig(save_path, dpi=300)
    plt.close()

    return {
        "baseline": {"slope": slope_base, "intercept": intercept_base},
        "ours": {"slope": slope_ours, "intercept": intercept_ours}
    }


# -----------------
# 实际实验数据
# -----------------
if __name__ == "__main__":

#################################################################123组#######################################################
# # ript 的 grad_penalty（第一组 12 + 第二组 12 + 第三组 12）
#     ript_grad_penalty = np.array([
#         # 第一组
#         0.037125616558527544, 0.024453069122744277, 0.03159771849777525, 0.030569655903370307,
#         0.035215652108591136, 0.03136532322890093, 0.030508079276179635, 0.03234341000550545,
#         0.024413137724905304, 0.02550950997606271, 0.02938760847053272, 0.029441756431502524,
#         # 第二组
#         0.03815410011693051, 0.02776570222815689, 0.03953100505628084, 0.03219895613820929,
#         0.029101321571751645, 0.035987019538879395, 0.03605689598056537, 0.037168603194387334,
#         0.03528829085697766, 0.034193018283224276, 0.03530863711708471, 0.03915776704487048,
#         # 第三组
#         0.01690389502862966, 0.019259586512485397, 0.014798134251644737, 0.01852672558112685,
#         0.016061054012639735, 0.018382532456341912, 0.014582069174757281, 0.016757740693933824,
#         0.01675216011379076, 0.020194018328631366, 0.015399358968819138, 0.018292641153140943
#     ])

#     # ript 的 success_rate（对应上面三组）
#     ript_success_rate = np.array([
#         # 第一组
#         0.2666, 0.2666, 0.06666, 0.06666, 0.06666, 0.06666, 0.06666, 0.1333, 0.2, 0.06666, 0.1333, 0.1333,
#         # 第二组
#         0.2, 0.26666, 0.133333, 0.133333, 0.133333, 0.2, 0.06666, 0.133333, 0.06666, 0.0, 0.2, 0.2,
#         # 第三组
#         0.1333, 0.2, 0.3333, 0.0, 0.2, 0.2667, 0.2667, 0.1333, 0.2, 0.1333, 0.1333, 0.0667
#     ])

#     # ours 的 grad_penalty（第一组 12 + 第二组 12 + 第三组 12）
#     ours_grad_penalty = np.array([
#         # 第一组
#         0.03713678909560381, 0.03917620933219178, 0.03229369093107697, 0.033322886416786594,
#         0.02367903056897615, 0.029513049683841972, 0.029483235677083334, 0.035195501227127876,
#         0.024137597335012334, 0.0391592728464227, 0.030089111328125, 0.03449663285916169,
#         # 第二组
#         0.037007382041529605, 0.03274114508377878, 0.037878337659333884, 0.032559946963661594,
#         0.037457717092413655, 0.03498810216000205, 0.046414425498560855, 0.037786360267254945,
#         0.04173429388748972, 0.041689670044370644, 0.04854674088327508, 0.043265493292557564,
#         # 第三组
#         0.03886172645970395, 0.033977508544921875, 0.033346216161767916, 0.029863859477796052,
#         0.035236803465934184, 0.039652071501079356, 0.04049170644659745, 0.049156160390332396,
#         0.03655815124511719, 0.035302713255568774, 0.039232655575400906, 0.03620391080029122
#     ])

#     # ours 的 success_rate（对应上面三组）
#     ours_success_rate = np.array([
#         # 第一组
#         0.2, 0.2, 0.0, 0.06666, 0.06666, 0.2, 0.1333, 0.1333, 0.06666, 0.1333, 0.2, 0.0,
#         # 第二组
#         0.26666, 0.26666, 0.26666, 0.2, 0.06666, 0.2, 0.06666, 0.4, 0.06666, 0.4, 0.4, 0.133333,
#         # 第三組
#         0.2, 0.2, 0.2667, 0.2, 0.1333, 0.2667, 0.2, 0.2, 0.2, 0.2, 0.1333, 0.1333
#     ])
#################################################################123组#######################################################


    # ===================== ript =====================
    ript_grad_penalty = np.array([
        # 第一组
        0.037125616558527544, 0.024453069122744277, 0.03159771849777525, 0.030569655903370307,
        0.035215652108591136, 0.03136532322890093, 0.030508079276179635, 0.03234341000550545,
        0.024413137724905304, 0.02550950997606271, 0.02938760847053272, 0.029441756431502524,
        # 第二组
        0.03815410011693051, 0.02776570222815689, 0.03953100505628084, 0.03219895613820929,
        0.029101321571751645, 0.035987019538879395, 0.03605689598056537, 0.037168603194387334,
        0.03528829085697766, 0.034193018283224276, 0.03530863711708471, 0.03915776704487048,
        # 第三组
        0.01690389502862966, 0.019259586512485397, 0.014798134251644737, 0.01852672558112685,
        0.016061054012639735, 0.018382532456341912, 0.014582069174757281, 0.016757740693933824,
        0.01675216011379076, 0.020194018328631366, 0.015399358968819138, 0.018292641153140943,
        # 第四组
        0.03147837990208676, 0.03299271432976974, 0.02999566730700041, 0.024461104880253822,
        0.027812771267361112, 0.02549552233842966, 0.024654434021725596, 0.023634622263353923,
        0.026604546440972224, 0.03314249139083059,

        # 第五组
        0.028333485555305755, 0.02214808042357568, 0.028670993782359468, 0.0271951904296875,
        0.031584376053844426, 0.020455810546875, 0.02423325735120917, 0.02144759041922433,
        0.02330250642737564, 0.025318831848583634, 0.019940573071676588, 0.019515676596730026
    ])

    ript_success_rate = np.array([
        # 第一组
        0.2666, 0.2666, 0.06666, 0.06666, 0.06666, 0.06666, 0.06666, 0.1333, 0.2, 0.06666, 0.1333, 0.1333,
        # 第二组
        0.2, 0.26666, 0.133333, 0.133333, 0.133333, 0.2, 0.06666, 0.133333, 0.06666, 0.0, 0.2, 0.2,
        # 第三组
        0.1333, 0.2, 0.3333, 0.0, 0.2, 0.2667, 0.2667, 0.1333, 0.2, 0.1333, 0.1333, 0.0667,
        # 第四组
        0.3333, 0.0667, 0.1333, 0.1333, 0.1333, 0.2667, 0.2, 0.4, 0.0667, 0.3333,
        # 第五组
        0.2, 0.2, 0.2667, 0.2667, 0.1333, 0.1333, 0.4, 0.4667, 0.2667, 0.1333, 0.2667, 0.2
    ])

    # ===================== ours =====================
    ours_grad_penalty = np.array([
        # 第一组
        0.03713678909560381, 0.03917620933219178, 0.03229369093107697, 0.033322886416786594,
        0.02367903056897615, 0.029513049683841972, 0.029483235677083334, 0.035195501227127876,
        0.024137597335012334, 0.0391592728464227, 0.030089111328125, 0.03449663285916169,
        # 第二组
        0.037007382041529605, 0.03274114508377878, 0.037878337659333884, 0.032559946963661594,
        0.037457717092413655, 0.03498810216000205, 0.046414425498560855, 0.037786360267254945,
        0.04173429388748972, 0.041689670044370644, 0.04854674088327508, 0.043265493292557564,
        # 第三组
        0.03886172645970395, 0.033977508544921875, 0.033346216161767916, 0.029863859477796052,
        0.035236803465934184, 0.039652071501079356, 0.04049170644659745, 0.049156160390332396,
        0.03655815124511719, 0.035302713255568774, 0.039232655575400906, 0.03620391080029122,
        # 第四组
        0.0313342245001542, 0.028623174674244134, 0.027670910483912417, 0.028966541358646954,
        0.03068734173798681, 0.02418584990919682, 0.03290554470486111, 0.019954469468858507,
        0.025896187288215362, 0.02710240323778609, 0.023284912109375, 0.024394734700520834,
        # 第五组
        0.02843722336583858, 0.01975315927669702, 0.029634505983382936, 0.031373834334356934,
        0.02505922557121545, 0.02802679106945128, 0.022472873263888887, 0.025925299133917296,
        0.026058143293353875, 0.02128245613791726, 0.0311536865234375, 0.03267296761140695
    ])

    ours_success_rate = np.array([
        # 第一组
        0.2, 0.2, 0.0, 0.06666, 0.06666, 0.2, 0.1333, 0.1333, 0.06666, 0.1333, 0.2, 0.0,
        # 第二组
        0.26666, 0.26666, 0.26666, 0.2, 0.06666, 0.2, 0.06666, 0.4, 0.06666, 0.4, 0.4, 0.133333,
        # 第三组
        0.2, 0.2, 0.2667, 0.2, 0.1333, 0.2667, 0.2, 0.2, 0.2, 0.2, 0.1333, 0.1333,
        # 第四组
        0.2, 0.2, 0.4, 0.2667, 0.2, 0.2, 0.0667, 0.1333, 0.4, 0.1333, 0.0667, 0.2,
        # 第五组
        0.2, 0.2667, 0.4667, 0.3333, 0.1333, 0.2, 0.3333, 0.2, 0.3333, 0.3333, 0.4, 0.3333
    ])


    results_path = "C:\\Users\\23509\\Desktop\\MiLAB\\iclr2026\\shift_jaco\\jaco_loss_curve\\"

    stats = plot_jacobian_vs_success_with_ci(ript_grad_penalty, ript_success_rate, 
                                             ours_grad_penalty, ours_success_rate,
                                             save_path=results_path+"jacobian_success_rollout15_12345.png"
                                             )
    print("Regression stats with 95% CI:", stats)
